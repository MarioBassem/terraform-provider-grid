// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/subi/substrate.go

// Package mock_subi is a generated GoMock package.
package provider

import (
	big "math/big"
	net "net"
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
	substrate "github.com/threefoldtech/substrate-client"
)

// MockSubstrateClient is a mock of SubstrateClient interface.
type MockSubstrateClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubstrateClientMockRecorder
}

// MockSubstrateClientMockRecorder is the mock recorder for MockSubstrateClient.
type MockSubstrateClientMockRecorder struct {
	mock *MockSubstrateClient
}

// NewMockSubstrateClient creates a new mock instance.
func NewMockSubstrateClient(ctrl *gomock.Controller) *MockSubstrateClient {
	mock := &MockSubstrateClient{ctrl: ctrl}
	mock.recorder = &MockSubstrateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubstrateClient) EXPECT() *MockSubstrateClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSubstrateClient) Call(cl substrate.Conn, meta substrate.Meta, identity substrate.Identity, call types.Call) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", cl, meta, identity, call)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockSubstrateClientMockRecorder) Call(cl, meta, identity, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSubstrateClient)(nil).Call), cl, meta, identity, call)
}

// CancelContract mocks base method.
func (m *MockSubstrateClient) CancelContract(identity substrate.Identity, contract uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelContract", identity, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelContract indicates an expected call of CancelContract.
func (mr *MockSubstrateClientMockRecorder) CancelContract(identity, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelContract", reflect.TypeOf((*MockSubstrateClient)(nil).CancelContract), identity, contract)
}

// CreateNameContract mocks base method.
func (m *MockSubstrateClient) CreateNameContract(identity substrate.Identity, name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNameContract", identity, name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNameContract indicates an expected call of CreateNameContract.
func (mr *MockSubstrateClientMockRecorder) CreateNameContract(identity, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNameContract", reflect.TypeOf((*MockSubstrateClient)(nil).CreateNameContract), identity, name)
}

// CreateNode mocks base method.
func (m *MockSubstrateClient) CreateNode(identity substrate.Identity, node substrate.Node) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", identity, node)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockSubstrateClientMockRecorder) CreateNode(identity, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockSubstrateClient)(nil).CreateNode), identity, node)
}

// CreateNodeContract mocks base method.
func (m *MockSubstrateClient) CreateNodeContract(identity substrate.Identity, node uint32, body []byte, hash string, publicIPs uint32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeContract", identity, node, body, hash, publicIPs)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeContract indicates an expected call of CreateNodeContract.
func (mr *MockSubstrateClientMockRecorder) CreateNodeContract(identity, node, body, hash, publicIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeContract", reflect.TypeOf((*MockSubstrateClient)(nil).CreateNodeContract), identity, node, body, hash, publicIPs)
}

// CreateRefundTransactionOrAddSig mocks base method.
func (m *MockSubstrateClient) CreateRefundTransactionOrAddSig(identity substrate.Identity, tx_hash, target string, amount int64, signature, stellarAddress string, sequence_number uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefundTransactionOrAddSig", identity, tx_hash, target, amount, signature, stellarAddress, sequence_number)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefundTransactionOrAddSig indicates an expected call of CreateRefundTransactionOrAddSig.
func (mr *MockSubstrateClientMockRecorder) CreateRefundTransactionOrAddSig(identity, tx_hash, target, amount, signature, stellarAddress, sequence_number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefundTransactionOrAddSig", reflect.TypeOf((*MockSubstrateClient)(nil).CreateRefundTransactionOrAddSig), identity, tx_hash, target, amount, signature, stellarAddress, sequence_number)
}

// CreateTwin mocks base method.
func (m *MockSubstrateClient) CreateTwin(identity substrate.Identity, ip net.IP) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTwin", identity, ip)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTwin indicates an expected call of CreateTwin.
func (mr *MockSubstrateClientMockRecorder) CreateTwin(identity, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTwin", reflect.TypeOf((*MockSubstrateClient)(nil).CreateTwin), identity, ip)
}

// EnsureAccount mocks base method.
func (m *MockSubstrateClient) EnsureAccount(identity substrate.Identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash string) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAccount", identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureAccount indicates an expected call of EnsureAccount.
func (mr *MockSubstrateClientMockRecorder) EnsureAccount(identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAccount", reflect.TypeOf((*MockSubstrateClient)(nil).EnsureAccount), identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash)
}

// FetchEventsForBlockRange mocks base method.
func (m *MockSubstrateClient) FetchEventsForBlockRange(start, end uint32) (types.StorageKey, []types.StorageChangeSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEventsForBlockRange", start, end)
	ret0, _ := ret[0].(types.StorageKey)
	ret1, _ := ret[1].([]types.StorageChangeSet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchEventsForBlockRange indicates an expected call of FetchEventsForBlockRange.
func (mr *MockSubstrateClientMockRecorder) FetchEventsForBlockRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEventsForBlockRange", reflect.TypeOf((*MockSubstrateClient)(nil).FetchEventsForBlockRange), start, end)
}

// GetAccount mocks base method.
func (m *MockSubstrateClient) GetAccount(identity substrate.Identity) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", identity)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockSubstrateClientMockRecorder) GetAccount(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockSubstrateClient)(nil).GetAccount), identity)
}

// GetBlock mocks base method.
func (m *MockSubstrateClient) GetBlock(block types.Hash) (*types.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", block)
	ret0, _ := ret[0].(*types.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockSubstrateClientMockRecorder) GetBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockSubstrateClient)(nil).GetBlock), block)
}

// GetBurnTransaction mocks base method.
func (m *MockSubstrateClient) GetBurnTransaction(identity substrate.Identity, burnTransactionID types.U64) (*substrate.BurnTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBurnTransaction", identity, burnTransactionID)
	ret0, _ := ret[0].(*substrate.BurnTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBurnTransaction indicates an expected call of GetBurnTransaction.
func (mr *MockSubstrateClientMockRecorder) GetBurnTransaction(identity, burnTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBurnTransaction", reflect.TypeOf((*MockSubstrateClient)(nil).GetBurnTransaction), identity, burnTransactionID)
}

// GetClient mocks base method.
func (m *MockSubstrateClient) GetClient() (substrate.Conn, substrate.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(substrate.Conn)
	ret1, _ := ret[1].(substrate.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockSubstrateClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockSubstrateClient)(nil).GetClient))
}

// GetContract mocks base method.
func (m *MockSubstrateClient) GetContract(id uint64) (*substrate.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", id)
	ret0, _ := ret[0].(*substrate.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockSubstrateClientMockRecorder) GetContract(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockSubstrateClient)(nil).GetContract), id)
}

// GetContractIDByNameRegistration mocks base method.
func (m *MockSubstrateClient) GetContractIDByNameRegistration(name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractIDByNameRegistration", name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractIDByNameRegistration indicates an expected call of GetContractIDByNameRegistration.
func (mr *MockSubstrateClientMockRecorder) GetContractIDByNameRegistration(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractIDByNameRegistration", reflect.TypeOf((*MockSubstrateClient)(nil).GetContractIDByNameRegistration), name)
}

// GetContractWithHash mocks base method.
func (m *MockSubstrateClient) GetContractWithHash(node uint32, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractWithHash", node, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractWithHash indicates an expected call of GetContractWithHash.
func (mr *MockSubstrateClientMockRecorder) GetContractWithHash(node, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractWithHash", reflect.TypeOf((*MockSubstrateClient)(nil).GetContractWithHash), node, hash)
}

// GetCurrentHeight mocks base method.
func (m *MockSubstrateClient) GetCurrentHeight() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeight")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentHeight indicates an expected call of GetCurrentHeight.
func (mr *MockSubstrateClientMockRecorder) GetCurrentHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeight", reflect.TypeOf((*MockSubstrateClient)(nil).GetCurrentHeight))
}

// GetDepositFee mocks base method.
func (m *MockSubstrateClient) GetDepositFee(identity substrate.Identity) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositFee", identity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositFee indicates an expected call of GetDepositFee.
func (mr *MockSubstrateClientMockRecorder) GetDepositFee(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositFee", reflect.TypeOf((*MockSubstrateClient)(nil).GetDepositFee), identity)
}

// GetEntity mocks base method.
func (m *MockSubstrateClient) GetEntity(id uint32) (*substrate.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", id)
	ret0, _ := ret[0].(*substrate.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockSubstrateClientMockRecorder) GetEntity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockSubstrateClient)(nil).GetEntity), id)
}

// GetFarm mocks base method.
func (m *MockSubstrateClient) GetFarm(id uint32) (*substrate.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm", id)
	ret0, _ := ret[0].(*substrate.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockSubstrateClientMockRecorder) GetFarm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockSubstrateClient)(nil).GetFarm), id)
}

// GetNode mocks base method.
func (m *MockSubstrateClient) GetNode(id uint32) (*substrate.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", id)
	ret0, _ := ret[0].(*substrate.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockSubstrateClientMockRecorder) GetNode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockSubstrateClient)(nil).GetNode), id)
}

// GetNodeByTwinID mocks base method.
func (m *MockSubstrateClient) GetNodeByTwinID(twin uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTwinID", twin)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTwinID indicates an expected call of GetNodeByTwinID.
func (mr *MockSubstrateClientMockRecorder) GetNodeByTwinID(twin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTwinID", reflect.TypeOf((*MockSubstrateClient)(nil).GetNodeByTwinID), twin)
}

// GetNodeContracts mocks base method.
func (m *MockSubstrateClient) GetNodeContracts(node uint32) ([]types.U64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeContracts", node)
	ret0, _ := ret[0].([]types.U64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeContracts indicates an expected call of GetNodeContracts.
func (mr *MockSubstrateClientMockRecorder) GetNodeContracts(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeContracts", reflect.TypeOf((*MockSubstrateClient)(nil).GetNodeContracts), node)
}

// GetRefundTransaction mocks base method.
func (m *MockSubstrateClient) GetRefundTransaction(identity substrate.Identity, txHash string) (*substrate.RefundTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundTransaction", identity, txHash)
	ret0, _ := ret[0].(*substrate.RefundTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundTransaction indicates an expected call of GetRefundTransaction.
func (mr *MockSubstrateClientMockRecorder) GetRefundTransaction(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundTransaction", reflect.TypeOf((*MockSubstrateClient)(nil).GetRefundTransaction), identity, txHash)
}

// GetTwin mocks base method.
func (m *MockSubstrateClient) GetTwin(id uint32) (*substrate.Twin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwin", id)
	ret0, _ := ret[0].(*substrate.Twin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwin indicates an expected call of GetTwin.
func (mr *MockSubstrateClientMockRecorder) GetTwin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwin", reflect.TypeOf((*MockSubstrateClient)(nil).GetTwin), id)
}

// GetTwinByPubKey mocks base method.
func (m *MockSubstrateClient) GetTwinByPubKey(pk []byte) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwinByPubKey", pk)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwinByPubKey indicates an expected call of GetTwinByPubKey.
func (mr *MockSubstrateClientMockRecorder) GetTwinByPubKey(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwinByPubKey", reflect.TypeOf((*MockSubstrateClient)(nil).GetTwinByPubKey), pk)
}

// GetUser mocks base method.
func (m *MockSubstrateClient) GetUser(id uint32) (*substrate.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*substrate.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSubstrateClientMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSubstrateClient)(nil).GetUser), id)
}

// IsBurnedAlready mocks base method.
func (m *MockSubstrateClient) IsBurnedAlready(identity substrate.Identity, burnTransactionID types.U64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBurnedAlready", identity, burnTransactionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBurnedAlready indicates an expected call of IsBurnedAlready.
func (mr *MockSubstrateClientMockRecorder) IsBurnedAlready(identity, burnTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBurnedAlready", reflect.TypeOf((*MockSubstrateClient)(nil).IsBurnedAlready), identity, burnTransactionID)
}

// IsMintedAlready mocks base method.
func (m *MockSubstrateClient) IsMintedAlready(identity substrate.Identity, mintTxID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMintedAlready", identity, mintTxID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMintedAlready indicates an expected call of IsMintedAlready.
func (mr *MockSubstrateClientMockRecorder) IsMintedAlready(identity, mintTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMintedAlready", reflect.TypeOf((*MockSubstrateClient)(nil).IsMintedAlready), identity, mintTxID)
}

// IsRefundedAlready mocks base method.
func (m *MockSubstrateClient) IsRefundedAlready(identity substrate.Identity, txHash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRefundedAlready", identity, txHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRefundedAlready indicates an expected call of IsRefundedAlready.
func (mr *MockSubstrateClientMockRecorder) IsRefundedAlready(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRefundedAlready", reflect.TypeOf((*MockSubstrateClient)(nil).IsRefundedAlready), identity, txHash)
}

// ProposeBurnTransactionOrAddSig mocks base method.
func (m *MockSubstrateClient) ProposeBurnTransactionOrAddSig(identity substrate.Identity, txID uint64, target string, amount *big.Int, signature, stellarAddress string, sequence_number uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeBurnTransactionOrAddSig", identity, txID, target, amount, signature, stellarAddress, sequence_number)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeBurnTransactionOrAddSig indicates an expected call of ProposeBurnTransactionOrAddSig.
func (mr *MockSubstrateClientMockRecorder) ProposeBurnTransactionOrAddSig(identity, txID, target, amount, signature, stellarAddress, sequence_number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeBurnTransactionOrAddSig", reflect.TypeOf((*MockSubstrateClient)(nil).ProposeBurnTransactionOrAddSig), identity, txID, target, amount, signature, stellarAddress, sequence_number)
}

// ProposeOrVoteMintTransaction mocks base method.
func (m *MockSubstrateClient) ProposeOrVoteMintTransaction(identity substrate.Identity, txID string, target substrate.AccountID, amount *big.Int) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeOrVoteMintTransaction", identity, txID, target, amount)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeOrVoteMintTransaction indicates an expected call of ProposeOrVoteMintTransaction.
func (mr *MockSubstrateClientMockRecorder) ProposeOrVoteMintTransaction(identity, txID, target, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeOrVoteMintTransaction", reflect.TypeOf((*MockSubstrateClient)(nil).ProposeOrVoteMintTransaction), identity, txID, target, amount)
}

// SetBurnTransactionExecuted mocks base method.
func (m *MockSubstrateClient) SetBurnTransactionExecuted(identity substrate.Identity, txID uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBurnTransactionExecuted", identity, txID)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBurnTransactionExecuted indicates an expected call of SetBurnTransactionExecuted.
func (mr *MockSubstrateClientMockRecorder) SetBurnTransactionExecuted(identity, txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBurnTransactionExecuted", reflect.TypeOf((*MockSubstrateClient)(nil).SetBurnTransactionExecuted), identity, txID)
}

// SetRefundTransactionExecuted mocks base method.
func (m *MockSubstrateClient) SetRefundTransactionExecuted(identity substrate.Identity, txHash string) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefundTransactionExecuted", identity, txHash)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRefundTransactionExecuted indicates an expected call of SetRefundTransactionExecuted.
func (mr *MockSubstrateClientMockRecorder) SetRefundTransactionExecuted(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefundTransactionExecuted", reflect.TypeOf((*MockSubstrateClient)(nil).SetRefundTransactionExecuted), identity, txHash)
}

// UpdateNode mocks base method.
func (m *MockSubstrateClient) UpdateNode(identity substrate.Identity, node substrate.Node) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", identity, node)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockSubstrateClientMockRecorder) UpdateNode(identity, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockSubstrateClient)(nil).UpdateNode), identity, node)
}

// UpdateNodeContract mocks base method.
func (m *MockSubstrateClient) UpdateNodeContract(identity substrate.Identity, contract uint64, body []byte, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeContract", identity, contract, body, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeContract indicates an expected call of UpdateNodeContract.
func (mr *MockSubstrateClientMockRecorder) UpdateNodeContract(identity, contract, body, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeContract", reflect.TypeOf((*MockSubstrateClient)(nil).UpdateNodeContract), identity, contract, body, hash)
}

// UpdateTwin mocks base method.
func (m *MockSubstrateClient) UpdateTwin(identity substrate.Identity, ip net.IP) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTwin", identity, ip)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTwin indicates an expected call of UpdateTwin.
func (mr *MockSubstrateClientMockRecorder) UpdateTwin(identity, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTwin", reflect.TypeOf((*MockSubstrateClient)(nil).UpdateTwin), identity, ip)
}
