// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gridproxy/grid_client.go

// Package mock_gridproxy is a generated GoMock package.
package provider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gridproxy "github.com/threefoldtech/terraform-provider-grid/internal/gridproxy"
)

// MockGridProxyClient is a mock of GridProxyClient interface.
type MockGridProxyClient struct {
	ctrl     *gomock.Controller
	recorder *MockGridProxyClientMockRecorder
}

// MockGridProxyClientMockRecorder is the mock recorder for MockGridProxyClient.
type MockGridProxyClientMockRecorder struct {
	mock *MockGridProxyClient
}

// NewMockGridProxyClient creates a new mock instance.
func NewMockGridProxyClient(ctrl *gomock.Controller) *MockGridProxyClient {
	mock := &MockGridProxyClient{ctrl: ctrl}
	mock.recorder = &MockGridProxyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGridProxyClient) EXPECT() *MockGridProxyClientMockRecorder {
	return m.recorder
}

// Farms mocks base method.
func (m *MockGridProxyClient) Farms(filter gridproxy.FarmFilter, pagination gridproxy.Limit) (gridproxy.FarmResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Farms", filter, pagination)
	ret0, _ := ret[0].(gridproxy.FarmResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Farms indicates an expected call of Farms.
func (mr *MockGridProxyClientMockRecorder) Farms(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Farms", reflect.TypeOf((*MockGridProxyClient)(nil).Farms), filter, pagination)
}

// Node mocks base method.
func (m *MockGridProxyClient) Node(nodeID uint32) (gridproxy.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", nodeID)
	ret0, _ := ret[0].(gridproxy.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MockGridProxyClientMockRecorder) Node(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockGridProxyClient)(nil).Node), nodeID)
}

// NodeStatus mocks base method.
func (m *MockGridProxyClient) NodeStatus(nodeID uint32) (gridproxy.NodeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeStatus", nodeID)
	ret0, _ := ret[0].(gridproxy.NodeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeStatus indicates an expected call of NodeStatus.
func (mr *MockGridProxyClientMockRecorder) NodeStatus(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeStatus", reflect.TypeOf((*MockGridProxyClient)(nil).NodeStatus), nodeID)
}

// Nodes mocks base method.
func (m *MockGridProxyClient) Nodes(filter gridproxy.NodeFilter, pagination gridproxy.Limit) ([]gridproxy.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes", filter, pagination)
	ret0, _ := ret[0].([]gridproxy.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nodes indicates an expected call of Nodes.
func (mr *MockGridProxyClientMockRecorder) Nodes(filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockGridProxyClient)(nil).Nodes), filter, pagination)
}

// Ping mocks base method.
func (m *MockGridProxyClient) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockGridProxyClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockGridProxyClient)(nil).Ping))
}
