// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/subi/substrate.go

// Package mock_subi is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	net "net"
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
	substrate "github.com/threefoldtech/substrate-client"
)

// MockSubstrate is a mock of Substrate interface.
type MockSubstrate struct {
	ctrl     *gomock.Controller
	recorder *MockSubstrateMockRecorder
}

// MockSubstrateMockRecorder is the mock recorder for MockSubstrate.
type MockSubstrateMockRecorder struct {
	mock *MockSubstrate
}

// NewMockSubstrate creates a new mock instance.
func NewMockSubstrate(ctrl *gomock.Controller) *MockSubstrate {
	mock := &MockSubstrate{ctrl: ctrl}
	mock.recorder = &MockSubstrateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubstrate) EXPECT() *MockSubstrateMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSubstrate) Call(cl substrate.Conn, meta substrate.Meta, identity substrate.Identity, call types.Call) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", cl, meta, identity, call)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockSubstrateMockRecorder) Call(cl, meta, identity, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSubstrate)(nil).Call), cl, meta, identity, call)
}

// CancelContract mocks base method.
func (m *MockSubstrate) CancelContract(identity substrate.Identity, contract uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelContract", identity, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelContract indicates an expected call of CancelContract.
func (mr *MockSubstrateMockRecorder) CancelContract(identity, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelContract", reflect.TypeOf((*MockSubstrate)(nil).CancelContract), identity, contract)
}

// Close mocks base method.
func (m *MockSubstrate) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSubstrateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubstrate)(nil).Close))
}

// CreateNameContract mocks base method.
func (m *MockSubstrate) CreateNameContract(identity substrate.Identity, name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNameContract", identity, name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNameContract indicates an expected call of CreateNameContract.
func (mr *MockSubstrateMockRecorder) CreateNameContract(identity, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNameContract", reflect.TypeOf((*MockSubstrate)(nil).CreateNameContract), identity, name)
}

// CreateNode mocks base method.
func (m *MockSubstrate) CreateNode(identity substrate.Identity, node substrate.Node) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", identity, node)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockSubstrateMockRecorder) CreateNode(identity, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockSubstrate)(nil).CreateNode), identity, node)
}

// CreateNodeContract mocks base method.
func (m *MockSubstrate) CreateNodeContract(identity substrate.Identity, node uint32, body []byte, hash string, publicIPs uint32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeContract", identity, node, body, hash, publicIPs)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeContract indicates an expected call of CreateNodeContract.
func (mr *MockSubstrateMockRecorder) CreateNodeContract(identity, node, body, hash, publicIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeContract", reflect.TypeOf((*MockSubstrate)(nil).CreateNodeContract), identity, node, body, hash, publicIPs)
}

// CreateRefundTransactionOrAddSig mocks base method.
func (m *MockSubstrate) CreateRefundTransactionOrAddSig(identity substrate.Identity, tx_hash, target string, amount int64, signature, stellarAddress string, sequence_number uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefundTransactionOrAddSig", identity, tx_hash, target, amount, signature, stellarAddress, sequence_number)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefundTransactionOrAddSig indicates an expected call of CreateRefundTransactionOrAddSig.
func (mr *MockSubstrateMockRecorder) CreateRefundTransactionOrAddSig(identity, tx_hash, target, amount, signature, stellarAddress, sequence_number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefundTransactionOrAddSig", reflect.TypeOf((*MockSubstrate)(nil).CreateRefundTransactionOrAddSig), identity, tx_hash, target, amount, signature, stellarAddress, sequence_number)
}

// CreateTwin mocks base method.
func (m *MockSubstrate) CreateTwin(identity substrate.Identity, ip net.IP) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTwin", identity, ip)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTwin indicates an expected call of CreateTwin.
func (mr *MockSubstrateMockRecorder) CreateTwin(identity, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTwin", reflect.TypeOf((*MockSubstrate)(nil).CreateTwin), identity, ip)
}

// EnsureAccount mocks base method.
func (m *MockSubstrate) EnsureAccount(identity substrate.Identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash string) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAccount", identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureAccount indicates an expected call of EnsureAccount.
func (mr *MockSubstrateMockRecorder) EnsureAccount(identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAccount", reflect.TypeOf((*MockSubstrate)(nil).EnsureAccount), identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash)
}

// FetchEventsForBlockRange mocks base method.
func (m *MockSubstrate) FetchEventsForBlockRange(start, end uint32) (types.StorageKey, []types.StorageChangeSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEventsForBlockRange", start, end)
	ret0, _ := ret[0].(types.StorageKey)
	ret1, _ := ret[1].([]types.StorageChangeSet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchEventsForBlockRange indicates an expected call of FetchEventsForBlockRange.
func (mr *MockSubstrateMockRecorder) FetchEventsForBlockRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEventsForBlockRange", reflect.TypeOf((*MockSubstrate)(nil).FetchEventsForBlockRange), start, end)
}

// GetAccount mocks base method.
func (m *MockSubstrate) GetAccount(identity substrate.Identity) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", identity)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockSubstrateMockRecorder) GetAccount(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockSubstrate)(nil).GetAccount), identity)
}

// GetBlock mocks base method.
func (m *MockSubstrate) GetBlock(block types.Hash) (*types.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", block)
	ret0, _ := ret[0].(*types.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockSubstrateMockRecorder) GetBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockSubstrate)(nil).GetBlock), block)
}

// GetBurnTransaction mocks base method.
func (m *MockSubstrate) GetBurnTransaction(identity substrate.Identity, burnTransactionID types.U64) (*substrate.BurnTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBurnTransaction", identity, burnTransactionID)
	ret0, _ := ret[0].(*substrate.BurnTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBurnTransaction indicates an expected call of GetBurnTransaction.
func (mr *MockSubstrateMockRecorder) GetBurnTransaction(identity, burnTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBurnTransaction", reflect.TypeOf((*MockSubstrate)(nil).GetBurnTransaction), identity, burnTransactionID)
}

// GetClient mocks base method.
func (m *MockSubstrate) GetClient() (substrate.Conn, substrate.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(substrate.Conn)
	ret1, _ := ret[1].(substrate.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockSubstrateMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockSubstrate)(nil).GetClient))
}

// GetContract mocks base method.
func (m *MockSubstrate) GetContract(id uint64) (*substrate.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", id)
	ret0, _ := ret[0].(*substrate.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockSubstrateMockRecorder) GetContract(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockSubstrate)(nil).GetContract), id)
}

// GetContractIDByNameRegistration mocks base method.
func (m *MockSubstrate) GetContractIDByNameRegistration(name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractIDByNameRegistration", name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractIDByNameRegistration indicates an expected call of GetContractIDByNameRegistration.
func (mr *MockSubstrateMockRecorder) GetContractIDByNameRegistration(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractIDByNameRegistration", reflect.TypeOf((*MockSubstrate)(nil).GetContractIDByNameRegistration), name)
}

// GetContractWithHash mocks base method.
func (m *MockSubstrate) GetContractWithHash(node uint32, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractWithHash", node, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractWithHash indicates an expected call of GetContractWithHash.
func (mr *MockSubstrateMockRecorder) GetContractWithHash(node, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractWithHash", reflect.TypeOf((*MockSubstrate)(nil).GetContractWithHash), node, hash)
}

// GetCurrentHeight mocks base method.
func (m *MockSubstrate) GetCurrentHeight() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeight")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentHeight indicates an expected call of GetCurrentHeight.
func (mr *MockSubstrateMockRecorder) GetCurrentHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeight", reflect.TypeOf((*MockSubstrate)(nil).GetCurrentHeight))
}

// GetDepositFee mocks base method.
func (m *MockSubstrate) GetDepositFee(identity substrate.Identity) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositFee", identity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositFee indicates an expected call of GetDepositFee.
func (mr *MockSubstrateMockRecorder) GetDepositFee(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositFee", reflect.TypeOf((*MockSubstrate)(nil).GetDepositFee), identity)
}

// GetEntity mocks base method.
func (m *MockSubstrate) GetEntity(id uint32) (*substrate.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", id)
	ret0, _ := ret[0].(*substrate.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockSubstrateMockRecorder) GetEntity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockSubstrate)(nil).GetEntity), id)
}

// GetFarm mocks base method.
func (m *MockSubstrate) GetFarm(id uint32) (*substrate.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm", id)
	ret0, _ := ret[0].(*substrate.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockSubstrateMockRecorder) GetFarm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockSubstrate)(nil).GetFarm), id)
}

// GetNode mocks base method.
func (m *MockSubstrate) GetNode(id uint32) (*substrate.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", id)
	ret0, _ := ret[0].(*substrate.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockSubstrateMockRecorder) GetNode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockSubstrate)(nil).GetNode), id)
}

// GetNodeByTwinID mocks base method.
func (m *MockSubstrate) GetNodeByTwinID(twin uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTwinID", twin)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTwinID indicates an expected call of GetNodeByTwinID.
func (mr *MockSubstrateMockRecorder) GetNodeByTwinID(twin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTwinID", reflect.TypeOf((*MockSubstrate)(nil).GetNodeByTwinID), twin)
}

// GetNodeContracts mocks base method.
func (m *MockSubstrate) GetNodeContracts(node uint32) ([]types.U64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeContracts", node)
	ret0, _ := ret[0].([]types.U64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeContracts indicates an expected call of GetNodeContracts.
func (mr *MockSubstrateMockRecorder) GetNodeContracts(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeContracts", reflect.TypeOf((*MockSubstrate)(nil).GetNodeContracts), node)
}

// GetRefundTransaction mocks base method.
func (m *MockSubstrate) GetRefundTransaction(identity substrate.Identity, txHash string) (*substrate.RefundTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundTransaction", identity, txHash)
	ret0, _ := ret[0].(*substrate.RefundTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundTransaction indicates an expected call of GetRefundTransaction.
func (mr *MockSubstrateMockRecorder) GetRefundTransaction(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundTransaction", reflect.TypeOf((*MockSubstrate)(nil).GetRefundTransaction), identity, txHash)
}

// GetTwin mocks base method.
func (m *MockSubstrate) GetTwin(id uint32) (*substrate.Twin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwin", id)
	ret0, _ := ret[0].(*substrate.Twin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwin indicates an expected call of GetTwin.
func (mr *MockSubstrateMockRecorder) GetTwin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwin", reflect.TypeOf((*MockSubstrate)(nil).GetTwin), id)
}

// GetTwinByPubKey mocks base method.
func (m *MockSubstrate) GetTwinByPubKey(pk []byte) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwinByPubKey", pk)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwinByPubKey indicates an expected call of GetTwinByPubKey.
func (mr *MockSubstrateMockRecorder) GetTwinByPubKey(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwinByPubKey", reflect.TypeOf((*MockSubstrate)(nil).GetTwinByPubKey), pk)
}

// GetUser mocks base method.
func (m *MockSubstrate) GetUser(id uint32) (*substrate.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*substrate.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSubstrateMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSubstrate)(nil).GetUser), id)
}

// IsBurnedAlready mocks base method.
func (m *MockSubstrate) IsBurnedAlready(identity substrate.Identity, burnTransactionID types.U64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBurnedAlready", identity, burnTransactionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBurnedAlready indicates an expected call of IsBurnedAlready.
func (mr *MockSubstrateMockRecorder) IsBurnedAlready(identity, burnTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBurnedAlready", reflect.TypeOf((*MockSubstrate)(nil).IsBurnedAlready), identity, burnTransactionID)
}

// IsMintedAlready mocks base method.
func (m *MockSubstrate) IsMintedAlready(identity substrate.Identity, mintTxID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMintedAlready", identity, mintTxID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMintedAlready indicates an expected call of IsMintedAlready.
func (mr *MockSubstrateMockRecorder) IsMintedAlready(identity, mintTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMintedAlready", reflect.TypeOf((*MockSubstrate)(nil).IsMintedAlready), identity, mintTxID)
}

// IsRefundedAlready mocks base method.
func (m *MockSubstrate) IsRefundedAlready(identity substrate.Identity, txHash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRefundedAlready", identity, txHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRefundedAlready indicates an expected call of IsRefundedAlready.
func (mr *MockSubstrateMockRecorder) IsRefundedAlready(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRefundedAlready", reflect.TypeOf((*MockSubstrate)(nil).IsRefundedAlready), identity, txHash)
}

// ProposeBurnTransactionOrAddSig mocks base method.
func (m *MockSubstrate) ProposeBurnTransactionOrAddSig(identity substrate.Identity, txID uint64, target string, amount *big.Int, signature, stellarAddress string, sequence_number uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeBurnTransactionOrAddSig", identity, txID, target, amount, signature, stellarAddress, sequence_number)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeBurnTransactionOrAddSig indicates an expected call of ProposeBurnTransactionOrAddSig.
func (mr *MockSubstrateMockRecorder) ProposeBurnTransactionOrAddSig(identity, txID, target, amount, signature, stellarAddress, sequence_number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeBurnTransactionOrAddSig", reflect.TypeOf((*MockSubstrate)(nil).ProposeBurnTransactionOrAddSig), identity, txID, target, amount, signature, stellarAddress, sequence_number)
}

// ProposeOrVoteMintTransaction mocks base method.
func (m *MockSubstrate) ProposeOrVoteMintTransaction(identity substrate.Identity, txID string, target substrate.AccountID, amount *big.Int) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeOrVoteMintTransaction", identity, txID, target, amount)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeOrVoteMintTransaction indicates an expected call of ProposeOrVoteMintTransaction.
func (mr *MockSubstrateMockRecorder) ProposeOrVoteMintTransaction(identity, txID, target, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeOrVoteMintTransaction", reflect.TypeOf((*MockSubstrate)(nil).ProposeOrVoteMintTransaction), identity, txID, target, amount)
}

// SetBurnTransactionExecuted mocks base method.
func (m *MockSubstrate) SetBurnTransactionExecuted(identity substrate.Identity, txID uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBurnTransactionExecuted", identity, txID)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBurnTransactionExecuted indicates an expected call of SetBurnTransactionExecuted.
func (mr *MockSubstrateMockRecorder) SetBurnTransactionExecuted(identity, txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBurnTransactionExecuted", reflect.TypeOf((*MockSubstrate)(nil).SetBurnTransactionExecuted), identity, txID)
}

// SetRefundTransactionExecuted mocks base method.
func (m *MockSubstrate) SetRefundTransactionExecuted(identity substrate.Identity, txHash string) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefundTransactionExecuted", identity, txHash)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRefundTransactionExecuted indicates an expected call of SetRefundTransactionExecuted.
func (mr *MockSubstrateMockRecorder) SetRefundTransactionExecuted(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefundTransactionExecuted", reflect.TypeOf((*MockSubstrate)(nil).SetRefundTransactionExecuted), identity, txHash)
}

// UpdateNode mocks base method.
func (m *MockSubstrate) UpdateNode(identity substrate.Identity, node substrate.Node) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", identity, node)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockSubstrateMockRecorder) UpdateNode(identity, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockSubstrate)(nil).UpdateNode), identity, node)
}

// UpdateNodeContract mocks base method.
func (m *MockSubstrate) UpdateNodeContract(identity substrate.Identity, contract uint64, body []byte, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeContract", identity, contract, body, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeContract indicates an expected call of UpdateNodeContract.
func (mr *MockSubstrateMockRecorder) UpdateNodeContract(identity, contract, body, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeContract", reflect.TypeOf((*MockSubstrate)(nil).UpdateNodeContract), identity, contract, body, hash)
}

// UpdateTwin mocks base method.
func (m *MockSubstrate) UpdateTwin(identity substrate.Identity, ip net.IP) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTwin", identity, ip)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTwin indicates an expected call of UpdateTwin.
func (mr *MockSubstrateMockRecorder) UpdateTwin(identity, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTwin", reflect.TypeOf((*MockSubstrate)(nil).UpdateTwin), identity, ip)
}

// MockSubstrateExt is a mock of SubstrateExt interface.
type MockSubstrateExt struct {
	ctrl     *gomock.Controller
	recorder *MockSubstrateExtMockRecorder
}

// MockSubstrateExtMockRecorder is the mock recorder for MockSubstrateExt.
type MockSubstrateExtMockRecorder struct {
	mock *MockSubstrateExt
}

// NewMockSubstrateExt creates a new mock instance.
func NewMockSubstrateExt(ctrl *gomock.Controller) *MockSubstrateExt {
	mock := &MockSubstrateExt{ctrl: ctrl}
	mock.recorder = &MockSubstrateExtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubstrateExt) EXPECT() *MockSubstrateExtMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSubstrateExt) Call(cl substrate.Conn, meta substrate.Meta, identity substrate.Identity, call types.Call) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", cl, meta, identity, call)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockSubstrateExtMockRecorder) Call(cl, meta, identity, call interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSubstrateExt)(nil).Call), cl, meta, identity, call)
}

// CancelContract mocks base method.
func (m *MockSubstrateExt) CancelContract(identity substrate.Identity, contract uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelContract", identity, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelContract indicates an expected call of CancelContract.
func (mr *MockSubstrateExtMockRecorder) CancelContract(identity, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelContract", reflect.TypeOf((*MockSubstrateExt)(nil).CancelContract), identity, contract)
}

// Close mocks base method.
func (m *MockSubstrateExt) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSubstrateExtMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubstrateExt)(nil).Close))
}

// CreateNameContract mocks base method.
func (m *MockSubstrateExt) CreateNameContract(identity substrate.Identity, name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNameContract", identity, name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNameContract indicates an expected call of CreateNameContract.
func (mr *MockSubstrateExtMockRecorder) CreateNameContract(identity, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNameContract", reflect.TypeOf((*MockSubstrateExt)(nil).CreateNameContract), identity, name)
}

// CreateNode mocks base method.
func (m *MockSubstrateExt) CreateNode(identity substrate.Identity, node substrate.Node) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", identity, node)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockSubstrateExtMockRecorder) CreateNode(identity, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockSubstrateExt)(nil).CreateNode), identity, node)
}

// CreateNodeContract mocks base method.
func (m *MockSubstrateExt) CreateNodeContract(identity substrate.Identity, node uint32, body []byte, hash string, publicIPs uint32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeContract", identity, node, body, hash, publicIPs)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeContract indicates an expected call of CreateNodeContract.
func (mr *MockSubstrateExtMockRecorder) CreateNodeContract(identity, node, body, hash, publicIPs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeContract", reflect.TypeOf((*MockSubstrateExt)(nil).CreateNodeContract), identity, node, body, hash, publicIPs)
}

// CreateRefundTransactionOrAddSig mocks base method.
func (m *MockSubstrateExt) CreateRefundTransactionOrAddSig(identity substrate.Identity, tx_hash, target string, amount int64, signature, stellarAddress string, sequence_number uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefundTransactionOrAddSig", identity, tx_hash, target, amount, signature, stellarAddress, sequence_number)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefundTransactionOrAddSig indicates an expected call of CreateRefundTransactionOrAddSig.
func (mr *MockSubstrateExtMockRecorder) CreateRefundTransactionOrAddSig(identity, tx_hash, target, amount, signature, stellarAddress, sequence_number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefundTransactionOrAddSig", reflect.TypeOf((*MockSubstrateExt)(nil).CreateRefundTransactionOrAddSig), identity, tx_hash, target, amount, signature, stellarAddress, sequence_number)
}

// CreateTwin mocks base method.
func (m *MockSubstrateExt) CreateTwin(identity substrate.Identity, ip net.IP) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTwin", identity, ip)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTwin indicates an expected call of CreateTwin.
func (mr *MockSubstrateExtMockRecorder) CreateTwin(identity, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTwin", reflect.TypeOf((*MockSubstrateExt)(nil).CreateTwin), identity, ip)
}

// DeleteInvalidContracts mocks base method.
func (m *MockSubstrateExt) DeleteInvalidContracts(contracts map[uint32]uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvalidContracts", contracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvalidContracts indicates an expected call of DeleteInvalidContracts.
func (mr *MockSubstrateExtMockRecorder) DeleteInvalidContracts(contracts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvalidContracts", reflect.TypeOf((*MockSubstrateExt)(nil).DeleteInvalidContracts), contracts)
}

// EnsureAccount mocks base method.
func (m *MockSubstrateExt) EnsureAccount(identity substrate.Identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash string) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureAccount", identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureAccount indicates an expected call of EnsureAccount.
func (mr *MockSubstrateExtMockRecorder) EnsureAccount(identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureAccount", reflect.TypeOf((*MockSubstrateExt)(nil).EnsureAccount), identity, activationURL, termsAndConditionsLink, terminsAndConditionsHash)
}

// EnsureContractCanceled mocks base method.
func (m *MockSubstrateExt) EnsureContractCanceled(identity substrate.Identity, contractID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureContractCanceled", identity, contractID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureContractCanceled indicates an expected call of EnsureContractCanceled.
func (mr *MockSubstrateExtMockRecorder) EnsureContractCanceled(identity, contractID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureContractCanceled", reflect.TypeOf((*MockSubstrateExt)(nil).EnsureContractCanceled), identity, contractID)
}

// FetchEventsForBlockRange mocks base method.
func (m *MockSubstrateExt) FetchEventsForBlockRange(start, end uint32) (types.StorageKey, []types.StorageChangeSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEventsForBlockRange", start, end)
	ret0, _ := ret[0].(types.StorageKey)
	ret1, _ := ret[1].([]types.StorageChangeSet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchEventsForBlockRange indicates an expected call of FetchEventsForBlockRange.
func (mr *MockSubstrateExtMockRecorder) FetchEventsForBlockRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEventsForBlockRange", reflect.TypeOf((*MockSubstrateExt)(nil).FetchEventsForBlockRange), start, end)
}

// GetAccount mocks base method.
func (m *MockSubstrateExt) GetAccount(identity substrate.Identity) (types.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", identity)
	ret0, _ := ret[0].(types.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockSubstrateExtMockRecorder) GetAccount(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockSubstrateExt)(nil).GetAccount), identity)
}

// GetBlock mocks base method.
func (m *MockSubstrateExt) GetBlock(block types.Hash) (*types.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", block)
	ret0, _ := ret[0].(*types.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockSubstrateExtMockRecorder) GetBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockSubstrateExt)(nil).GetBlock), block)
}

// GetBurnTransaction mocks base method.
func (m *MockSubstrateExt) GetBurnTransaction(identity substrate.Identity, burnTransactionID types.U64) (*substrate.BurnTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBurnTransaction", identity, burnTransactionID)
	ret0, _ := ret[0].(*substrate.BurnTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBurnTransaction indicates an expected call of GetBurnTransaction.
func (mr *MockSubstrateExtMockRecorder) GetBurnTransaction(identity, burnTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBurnTransaction", reflect.TypeOf((*MockSubstrateExt)(nil).GetBurnTransaction), identity, burnTransactionID)
}

// GetClient mocks base method.
func (m *MockSubstrateExt) GetClient() (substrate.Conn, substrate.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(substrate.Conn)
	ret1, _ := ret[1].(substrate.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockSubstrateExtMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockSubstrateExt)(nil).GetClient))
}

// GetContract mocks base method.
func (m *MockSubstrateExt) GetContract(id uint64) (*substrate.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", id)
	ret0, _ := ret[0].(*substrate.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockSubstrateExtMockRecorder) GetContract(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockSubstrateExt)(nil).GetContract), id)
}

// GetContractIDByNameRegistration mocks base method.
func (m *MockSubstrateExt) GetContractIDByNameRegistration(name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractIDByNameRegistration", name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractIDByNameRegistration indicates an expected call of GetContractIDByNameRegistration.
func (mr *MockSubstrateExtMockRecorder) GetContractIDByNameRegistration(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractIDByNameRegistration", reflect.TypeOf((*MockSubstrateExt)(nil).GetContractIDByNameRegistration), name)
}

// GetContractWithHash mocks base method.
func (m *MockSubstrateExt) GetContractWithHash(node uint32, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractWithHash", node, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractWithHash indicates an expected call of GetContractWithHash.
func (mr *MockSubstrateExtMockRecorder) GetContractWithHash(node, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractWithHash", reflect.TypeOf((*MockSubstrateExt)(nil).GetContractWithHash), node, hash)
}

// GetCurrentHeight mocks base method.
func (m *MockSubstrateExt) GetCurrentHeight() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeight")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentHeight indicates an expected call of GetCurrentHeight.
func (mr *MockSubstrateExtMockRecorder) GetCurrentHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeight", reflect.TypeOf((*MockSubstrateExt)(nil).GetCurrentHeight))
}

// GetDepositFee mocks base method.
func (m *MockSubstrateExt) GetDepositFee(identity substrate.Identity) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositFee", identity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositFee indicates an expected call of GetDepositFee.
func (mr *MockSubstrateExtMockRecorder) GetDepositFee(identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositFee", reflect.TypeOf((*MockSubstrateExt)(nil).GetDepositFee), identity)
}

// GetEntity mocks base method.
func (m *MockSubstrateExt) GetEntity(id uint32) (*substrate.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", id)
	ret0, _ := ret[0].(*substrate.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockSubstrateExtMockRecorder) GetEntity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockSubstrateExt)(nil).GetEntity), id)
}

// GetFarm mocks base method.
func (m *MockSubstrateExt) GetFarm(id uint32) (*substrate.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm", id)
	ret0, _ := ret[0].(*substrate.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockSubstrateExtMockRecorder) GetFarm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockSubstrateExt)(nil).GetFarm), id)
}

// GetNode mocks base method.
func (m *MockSubstrateExt) GetNode(id uint32) (*substrate.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", id)
	ret0, _ := ret[0].(*substrate.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockSubstrateExtMockRecorder) GetNode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockSubstrateExt)(nil).GetNode), id)
}

// GetNodeByTwinID mocks base method.
func (m *MockSubstrateExt) GetNodeByTwinID(twin uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTwinID", twin)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTwinID indicates an expected call of GetNodeByTwinID.
func (mr *MockSubstrateExtMockRecorder) GetNodeByTwinID(twin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTwinID", reflect.TypeOf((*MockSubstrateExt)(nil).GetNodeByTwinID), twin)
}

// GetNodeContracts mocks base method.
func (m *MockSubstrateExt) GetNodeContracts(node uint32) ([]types.U64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeContracts", node)
	ret0, _ := ret[0].([]types.U64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeContracts indicates an expected call of GetNodeContracts.
func (mr *MockSubstrateExtMockRecorder) GetNodeContracts(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeContracts", reflect.TypeOf((*MockSubstrateExt)(nil).GetNodeContracts), node)
}

// GetRefundTransaction mocks base method.
func (m *MockSubstrateExt) GetRefundTransaction(identity substrate.Identity, txHash string) (*substrate.RefundTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundTransaction", identity, txHash)
	ret0, _ := ret[0].(*substrate.RefundTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundTransaction indicates an expected call of GetRefundTransaction.
func (mr *MockSubstrateExtMockRecorder) GetRefundTransaction(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundTransaction", reflect.TypeOf((*MockSubstrateExt)(nil).GetRefundTransaction), identity, txHash)
}

// GetTwin mocks base method.
func (m *MockSubstrateExt) GetTwin(id uint32) (*substrate.Twin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwin", id)
	ret0, _ := ret[0].(*substrate.Twin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwin indicates an expected call of GetTwin.
func (mr *MockSubstrateExtMockRecorder) GetTwin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwin", reflect.TypeOf((*MockSubstrateExt)(nil).GetTwin), id)
}

// GetTwinByPubKey mocks base method.
func (m *MockSubstrateExt) GetTwinByPubKey(pk []byte) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwinByPubKey", pk)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwinByPubKey indicates an expected call of GetTwinByPubKey.
func (mr *MockSubstrateExtMockRecorder) GetTwinByPubKey(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwinByPubKey", reflect.TypeOf((*MockSubstrateExt)(nil).GetTwinByPubKey), pk)
}

// GetUser mocks base method.
func (m *MockSubstrateExt) GetUser(id uint32) (*substrate.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*substrate.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSubstrateExtMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSubstrateExt)(nil).GetUser), id)
}

// InvalidateNameContract mocks base method.
func (m *MockSubstrateExt) InvalidateNameContract(ctx context.Context, identity substrate.Identity, contractID uint64, name string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateNameContract", ctx, identity, contractID, name)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateNameContract indicates an expected call of InvalidateNameContract.
func (mr *MockSubstrateExtMockRecorder) InvalidateNameContract(ctx, identity, contractID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateNameContract", reflect.TypeOf((*MockSubstrateExt)(nil).InvalidateNameContract), ctx, identity, contractID, name)
}

// IsBurnedAlready mocks base method.
func (m *MockSubstrateExt) IsBurnedAlready(identity substrate.Identity, burnTransactionID types.U64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBurnedAlready", identity, burnTransactionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBurnedAlready indicates an expected call of IsBurnedAlready.
func (mr *MockSubstrateExtMockRecorder) IsBurnedAlready(identity, burnTransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBurnedAlready", reflect.TypeOf((*MockSubstrateExt)(nil).IsBurnedAlready), identity, burnTransactionID)
}

// IsMintedAlready mocks base method.
func (m *MockSubstrateExt) IsMintedAlready(identity substrate.Identity, mintTxID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMintedAlready", identity, mintTxID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMintedAlready indicates an expected call of IsMintedAlready.
func (mr *MockSubstrateExtMockRecorder) IsMintedAlready(identity, mintTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMintedAlready", reflect.TypeOf((*MockSubstrateExt)(nil).IsMintedAlready), identity, mintTxID)
}

// IsRefundedAlready mocks base method.
func (m *MockSubstrateExt) IsRefundedAlready(identity substrate.Identity, txHash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRefundedAlready", identity, txHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRefundedAlready indicates an expected call of IsRefundedAlready.
func (mr *MockSubstrateExtMockRecorder) IsRefundedAlready(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRefundedAlready", reflect.TypeOf((*MockSubstrateExt)(nil).IsRefundedAlready), identity, txHash)
}

// IsValidContract mocks base method.
func (m *MockSubstrateExt) IsValidContract(contractID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidContract", contractID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidContract indicates an expected call of IsValidContract.
func (mr *MockSubstrateExtMockRecorder) IsValidContract(contractID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidContract", reflect.TypeOf((*MockSubstrateExt)(nil).IsValidContract), contractID)
}

// ProposeBurnTransactionOrAddSig mocks base method.
func (m *MockSubstrateExt) ProposeBurnTransactionOrAddSig(identity substrate.Identity, txID uint64, target string, amount *big.Int, signature, stellarAddress string, sequence_number uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeBurnTransactionOrAddSig", identity, txID, target, amount, signature, stellarAddress, sequence_number)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeBurnTransactionOrAddSig indicates an expected call of ProposeBurnTransactionOrAddSig.
func (mr *MockSubstrateExtMockRecorder) ProposeBurnTransactionOrAddSig(identity, txID, target, amount, signature, stellarAddress, sequence_number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeBurnTransactionOrAddSig", reflect.TypeOf((*MockSubstrateExt)(nil).ProposeBurnTransactionOrAddSig), identity, txID, target, amount, signature, stellarAddress, sequence_number)
}

// ProposeOrVoteMintTransaction mocks base method.
func (m *MockSubstrateExt) ProposeOrVoteMintTransaction(identity substrate.Identity, txID string, target substrate.AccountID, amount *big.Int) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeOrVoteMintTransaction", identity, txID, target, amount)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeOrVoteMintTransaction indicates an expected call of ProposeOrVoteMintTransaction.
func (mr *MockSubstrateExtMockRecorder) ProposeOrVoteMintTransaction(identity, txID, target, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeOrVoteMintTransaction", reflect.TypeOf((*MockSubstrateExt)(nil).ProposeOrVoteMintTransaction), identity, txID, target, amount)
}

// SetBurnTransactionExecuted mocks base method.
func (m *MockSubstrateExt) SetBurnTransactionExecuted(identity substrate.Identity, txID uint64) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBurnTransactionExecuted", identity, txID)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBurnTransactionExecuted indicates an expected call of SetBurnTransactionExecuted.
func (mr *MockSubstrateExtMockRecorder) SetBurnTransactionExecuted(identity, txID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBurnTransactionExecuted", reflect.TypeOf((*MockSubstrateExt)(nil).SetBurnTransactionExecuted), identity, txID)
}

// SetRefundTransactionExecuted mocks base method.
func (m *MockSubstrateExt) SetRefundTransactionExecuted(identity substrate.Identity, txHash string) (*types.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefundTransactionExecuted", identity, txHash)
	ret0, _ := ret[0].(*types.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRefundTransactionExecuted indicates an expected call of SetRefundTransactionExecuted.
func (mr *MockSubstrateExtMockRecorder) SetRefundTransactionExecuted(identity, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefundTransactionExecuted", reflect.TypeOf((*MockSubstrateExt)(nil).SetRefundTransactionExecuted), identity, txHash)
}

// UpdateNode mocks base method.
func (m *MockSubstrateExt) UpdateNode(identity substrate.Identity, node substrate.Node) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", identity, node)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockSubstrateExtMockRecorder) UpdateNode(identity, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockSubstrateExt)(nil).UpdateNode), identity, node)
}

// UpdateNodeContract mocks base method.
func (m *MockSubstrateExt) UpdateNodeContract(identity substrate.Identity, contract uint64, body []byte, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeContract", identity, contract, body, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeContract indicates an expected call of UpdateNodeContract.
func (mr *MockSubstrateExtMockRecorder) UpdateNodeContract(identity, contract, body, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeContract", reflect.TypeOf((*MockSubstrateExt)(nil).UpdateNodeContract), identity, contract, body, hash)
}

// UpdateTwin mocks base method.
func (m *MockSubstrateExt) UpdateTwin(identity substrate.Identity, ip net.IP) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTwin", identity, ip)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTwin indicates an expected call of UpdateTwin.
func (mr *MockSubstrateExtMockRecorder) UpdateTwin(identity, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTwin", reflect.TypeOf((*MockSubstrateExt)(nil).UpdateTwin), identity, ip)
}
